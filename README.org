#+STARTUP: overview
#+TITLE: Oleksandr Emacs Config
#+CREATOR: Oleksandr Kononov
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Overview

This config file is heavily inspired and influenced by [[https://github.com/daedreth/UncleDavesEmacs][daedreth (aka UncleDave)]] emacs config.
He also runs a Youtube Emacs series with helpful guides and tips on configuring Emacs.
That said, although I have taken influences from *daedreth*, I will be changing the config to
suit my personal needs and requirements.

Therefore for the time being this config file is subject to changes at any time
* Appearance
** Theme - Zerodark
Looks like a decent dark theme to use for now
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :init
    (load-theme 'zerodark t))
#+END_SRC
** Some Extra Customisation
#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
        (default (if (true-color-p) "#abb2bf" "#afafaf"))
        (light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
        (background (if (true-color-p) "#282c34" "#333333"))
        (background-dark (if (true-color-p) "#24282f" "#222222"))
        (background-darker (if (true-color-p) "#22252c" "#222222"))
        (mode-line-inactive (if "#1c2129" "#222222"))
        (mode-line-active (if (true-color-p) "#6f337e" "#875f87"))
        (background-lighter (if (true-color-p) "#3a3f4b" "#5f5f5f"))
        (background-red (if (true-color-p) "#4c3840" "#5f5f5f"))
        (bright-background-red (if (true-color-p) "#744a5b" "#744a5b"))
        (background-purple (if (true-color-p) "#48384c" "#5f5f5f"))
        (background-blue (if (true-color-p) "#38394c" "#444444"))
        (bright-background-blue (if (true-color-p) "#4e5079" "#4e5079"))
        (background-green (if (true-color-p) "#3d4a41" "#5f5f5f"))
        (bright-background-green (if (true-color-p) "#3f6d54" "#3f6d54"))
        (background-orange (if (true-color-p) "#4a473d" "#5f5f5f"))
        (hl-line (if (true-color-p) "#2c323b" "#333333"))
        (grey (if (true-color-p) "#cccccc" "#cccccc"))
        (grey-dark (if (true-color-p) "#666666" "#666666"))
        (highlight (if (true-color-p) "#3e4451" "#5f5f5f"))
        (comment (if (true-color-p) "#687080" "#707070"))
        (orange (if (true-color-p) "#da8548" "#d7875f"))
        (orange-light (if (true-color-p) "#ddbd78" "#d7af87"))
        (red (if (true-color-p) "#ff6c6b" "#ff5f5f"))
        (purple (if (true-color-p) "#c678dd" "#d787d7"))
        (purple-dark (if (true-color-p) "#64446d" "#5f5f5f"))
        (blue (if (true-color-p) "#61afef" "#5fafff"))
        (blue-dark (if (true-color-p) "#1f5582" "#005f87"))
        (green (if (true-color-p) "#98be65" "#87af5f"))
        (green-light (if (true-color-p) "#9eac8c" "#afaf87"))
        (peach "PeachPuff3")
        (diff-added-background (if (true-color-p) "#284437" "#284437"))
        (diff-added-refined-background (if (true-color-p) "#1e8967" "#1e8967"))
        (diff-removed-background (if (true-color-p) "#583333" "#580000"))
        (diff-removed-refined-background (if (true-color-p) "#b33c49" "#b33c49"))
        (diff-current-background (if (true-color-p) "#29457b" "#29457b"))
        (diff-current-refined-background (if (true-color-p) "#4174ae" "#4174ae")))

    (custom-theme-set-faces
     'zerodark

     `(fancy-battery-charging ((,class (:background ,background-blue :height 1.0 :bold t))))
     `(fancy-battery-discharging ((,class (:background ,background-blue :height 1.0))))
     `(fancy-battery-critical ((,class (:background ,background-blue :height 1.0))))

     ;; mode line stuff
     `(mode-line ((,class (:background ,background-blue :height 1.0 :foreground ,blue
                                       :distant-foreground ,background-blue
                                       :box ,(when zerodark-use-paddings-in-mode-line
                                               (list :line-width 6 :color background-blue))))))

     `(mode-line-inactive ((,class (:background ,background-blue :height 1.0 :foreground ,default
                                                :distant-foreground ,background-blue
                                                :box ,(when zerodark-use-paddings-in-mode-line
                                                        (list :line-width 6 :color background-blue))))))

     `(header-line ((,class (:inherit mode-line-inactive))))

     `(powerline-active0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-inactive0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))
     `(powerline-inactive1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             distant-foreground ,background-blue))))
     `(powerline-inactive2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))

     `(dashboard-heading-face ((,class (:background ,background :foreground ,blue
                                                    :bold t :height 1.2))))
     `(dashboard-banner-logo-title-face ((,class (:background ,background :foreground ,blue
                                                              :bold t :height 1.2))))
     `(widget-button ((,class (:background ,background :foreground ,default :bold nil
                                           :underline t :height 0.9))))

     ;; erc stuff
     `(erc-nick-default-face ((,class :foreground ,blue :background ,background :weight bold)))

     ;; org stuff
     `(outline-1 ((,class (:foreground ,blue :weight bold :height 1.3 :bold nil))))
     `(outline-2 ((,class (:foreground ,purple :weight bold :height 1.25 :bold nil))))
     `(outline-3 ((,class (:foreground ,peach :weight bold :height 1.20 :bold nil))))
     `(outline-4 ((,class (:foreground ,green-light :weight bold :height 1.2 :bold nil))))
     `(outline-5 ((,class (:foreground ,blue :weight bold :height 1.15 :bold nil))))
     `(outline-6 ((,class (:foreground ,purple :weight bold :height 1.1 :bold nil))))
     `(outline-7 ((,class (:foreground ,peach :weight bold :height 1 :bold nil))))
     `(outline-8 ((,class (:foreground ,green-light :weight bold :height 1 :bold nil))))

     `(org-block-begin-line ((,class (:background ,background-blue :foreground ,blue
                                                  :bold t :height 1.0))))
     `(org-block-end-line ((,class (:background ,background-blue :foreground ,blue
                                                :bold t :height 1.0))))))

  ;; font
  (set-face-attribute 'default nil :height 110 :family "xos4 Terminus")

#+END_SRC
** Modeline
I'm quite intested in customising the modeline and I'm going to use spaceline from
spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-seperator nil)
    (spaceline-spacemacs-theme))
#+END_SRC
*** Cursor position
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC
*** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")
  (display-time-mode 1)
#+END_SRC
*** Battery Indicator
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
      (setq fancy-battery-show-percentage t)
      (setq battery-update-interval 15)
      (if window-system
	(fancy-battery-mode)
	(display-battery-mode)))
#+END_SRC
* Basic Interface
Just cleaning up some interface stuff

*** Remove startup screen
I can customise the startup later

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (set-scroll-bar-mode nil)
#+END_SRC

*** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Set UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highlight current line when programming
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
* Functionality
*** Disable backups and autosave
What could possibly go wrong?
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

*** Change yes-or-no to y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async
Can be useful

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
* Window Manager - exwm
This I haven't decided upon yet, for now I'll use Emacs as is and maybe at some point I'll switch over
* Dashboard
This is basically the startup screen.
I'll use it for a bit and see how things go, if I like/get used to it I'll keep it
otherwise I'll remove it.

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title ""))
#+END_SRC
* Terminal
It's nice being able to use the terminal in Emacs
*** Setting the default shell to zsh
I could use bash, but since I already have zsh and I like the features it
has, I might as well use it in Emacs right?
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
*** Terminal key-binding
For now I won't set the key binding for the terminal.
The reason being is that right now I'm using i3wm and the quickest and easiest binding
for the terminal is already set through i3 (that being the Super-Enter).
So when I decide to switch to using Emacs window manager EXWM, I'll enable thing binding

=(global-set-key (kbd "<s-return>") 'ansi-term)=
* Emacs Navigation
Setting ivy off the bat here since other packages will require it
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC
** Scrolling
I don't know why default Emacs wants to jump instead of scroll, but I'm putting
a stop to it right now!
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Which-key
This! This right there makes my life sooo much easier.
This package basically auto-completes and gives suggests to the key bindings
you want to use. It's super useful to learn the key-bindings and not intrusive at all
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
      (which-key-mode))
#+END_SRC
** Windows/Panes
Navigating the windows/panes in Emacs can be a bit annoying,
you can only cycle the panes one way using =C-x o= and it's just troublesome when you have
more than 2 panes open.
*** Switch-window
It's quite a nice little package that will make switching windows much easier and quicker,
it basically uses a similar idea to how you navigate links in Qutebrowser
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
      ([remap other-window] . switch-window))
#+END_SRC
*** Following a split
When I split a window, I clearly intend to use the newly split window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Swpier
An improvement to the default Emacs search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
** Buffers and Buffer Lists
Improving working with buffers
*** Always kill the current buffer, I know what I'm doing!
 #+BEGIN_SRC emacs-lisp
   (defun kill-current-buffer ()
     "Kills the current buffer"
     (interactive)
     (kill-buffer (current-buffer)))
   (global-set-key (kbd "C-x k") 'kill-current-buffer)
 #+END_SRC
*** Don't ask when I kill a buffer
This might be a bit of an issue since I have muscle memory, but oh well!
#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC
*** Use ibuffer, it's good
This ibuffer is much better alternative than the default, not sure why it isn't a default!
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
*** Kill all buffers
Maybe sometime I'll need this
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC
** Relative Line Numbers
It's helpful I find in programming, so I like enabling it there
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
** Avy
Navigate in a flash anyway in the visible part of the screen Qutebrowser style
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC
** Helm
Have been using Helm for a while before, I know it can be a bit bloated comapred to ido.
But I'm just more used to it, if I do notice some slowness I'll switch to ido or something
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x b" . 'helm-buffers-list)
    ("M-x" . helm-M-x)
    :config
    (setq helm-autoresize-max-height 0
	  helm-autoresize-min-height 40
	  helm-M-x-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-split-window-in-side-p nil
	  helm-move-to-line-cycle-in-source nil
	  helm-ff-search-library-in-sexp t
	  helm-scroll-amount 8 
	  helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)
  (helm-autoresize-mode 1)
#+END_SRC
* Programming
** Flycheck
This package is an on the fly syntax checking extension
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC
** Yasnippet
The power of snippets cannot be under estimated!
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
	:ensure t)
      (yas-reload-all))
#+END_SRC
** Company
This is a large autocompeltion tool for Emacs which supports many languages
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC
** Specific languages
Each category has their own settings
*** C/C++
**** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
**** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))
#+END_SRC
**** Company
Requires libclang to be installed!
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
*** Python
**** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC
**** Flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
      (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-to-list 'company-backends 'company-jedi))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
				    company-etags
				    company-dabbrev-code))))

  (use-package company-jedi
    :ensure t
    :config
      (require 'company)
      (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC
*** Emacs Lisp
**** Eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC
**** Yasnippet
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC
*** Bash
**** Yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC
**** Flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'flycheck-mode)
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
				    company-shell-env
				    company-etags
				    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
      (require 'company)
      (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC
** Git
Magit is a pretty good git package for Emacs
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("M-g" . magit-status))
#+END_SRC
* Org Mode
This whole config file is written in org mode, so of course I need to do some config
on org-mode itself! But really org mode is increadible and do anything from simple todo lists
and note taking to complex academic paper!
** Common Settings
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Syntax Highlighting for HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	      '(lambda ()
		 (visual-line-mode 1)))
#+END_SRC
** Easy to add Emacs Lisp template
Hitting <el will create a template for elisp insertion
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
		 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Exporting Options
Org can export to a huge amount of different formats
*** Latex
For now I'll just add Latex
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "/usr/share/emacs/site-lisp/tex-utils")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/tex-utils")
    (require 'xdvi-search))
#+END_SRC
* Minor stuff
** Electric
Basically makes working with brackets much easier
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode t)
#+END_SRC
** Beacon
Every time you change buffers the cursor will be highlighted, very nice
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
      (beacon-mode 1))
#+END_SRC
** Rainbow
It's pretty cool, when you write a hex color it will change the font of that text to the
colour of the hex.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Show parens
Shows matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Rainbow delimiters
Shows parens with a different colour when they're nested,for elisp this is a must have!
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Expand region
This is actually pretty useful, it takes your cursor and exands the region around it semantically.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
** Hungry deletion
Deletes excessive whitespace so I don't have to keep hitting backspace
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
      (global-hungry-delete-mode))
#+END_SRC
** Popup-kill-ring
A simple little package to browse the kill-ring, invoke with M-y and use C-n and C-p to browse
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** Diminishing modes
Having the modeline bloated with lots of modes that I don't really care about is annoying
The =diminish= package will help solve this issue by hiding the modes from the modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode))
#+END_SRC
